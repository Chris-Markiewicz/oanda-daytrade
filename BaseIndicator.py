# BaseIndicator.py
import pandas as pd
from abc import ABC, abstractmethod

class BaseIndicator(ABC):
    """
    Abstract base class for all technical indicators.
    Each indicator should be able to calculate its value(s) given
    a DataFrame of OHLCV data (or at least a price Series).
    """
    def __init__(self, name="BaseIndicator"):
        self.name = name
        self.feature_names = [] # List of feature names this indicator will generate

    @abstractmethod
    def calculate(self, df_ohlcv: pd.DataFrame) -> pd.DataFrame:
        """
        Calculates the indicator values and adds them as columns to the DataFrame.

        Parameters:
        -----------
        df_ohlcv : pd.DataFrame
            Input DataFrame, expected to have at least a 'price' column.
            For many indicators, it should have 'open', 'high', 'low', 'close' (or 'price'), 'volume'.
            The 'close' price should be aliased or present as 'price' if that's the convention.

        Returns:
        --------
        pd.DataFrame
            The input DataFrame with new columns for the calculated indicator values.
            The self.feature_names list should be updated with the names of these new columns.
        """
        pass

    def get_feature_names(self) -> list:
        """
        Returns the names of the features generated by this indicator.
        """
        return self.feature_names

    def __repr__(self):
        return f"{self.name}({self._get_params_string()})"

    def _get_params_string(self):
        """Helper to get parameters for __repr__ (override in subclasses)"""
        return ""
